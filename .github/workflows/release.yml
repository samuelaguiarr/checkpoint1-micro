name: Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build application
      run: mvn clean package -DskipTests
      
    - name: Generate documentation
      run: |
        echo "# Global Solution API" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## Versão ${{ github.ref_name }}" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "### Funcionalidades:" >> RELEASE_NOTES.md
        echo "- API REST para gerenciamento de ambientes" >> RELEASE_NOTES.md
        echo "- Documentação Swagger/OpenAPI" >> RELEASE_NOTES.md
        echo "- Integração com MySQL" >> RELEASE_NOTES.md
        echo "- Containerização com Docker" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "### Como executar:" >> RELEASE_NOTES.md
        echo "1. Clone o repositório" >> RELEASE_NOTES.md
        echo "2. Execute: docker-compose up -d" >> RELEASE_NOTES.md
        echo "3. Acesse: http://localhost:8080" >> RELEASE_NOTES.md
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false
        
    - name: Upload JAR artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: target/*.jar
        asset_name: globalsolution-${{ github.ref_name }}.jar
        asset_content_type: application/java-archive
